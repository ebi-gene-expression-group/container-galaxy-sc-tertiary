sudo: required
cache: pip
language: python

python: 3.7

jobs:
  include:
    - stage: test
    - stage: deploy
      if: (type = push) AND (branch = develop)
      addons: {}
      before_install: skip
      before_script: skip
      install:
        - pip install planemo
        - planemo --version
        - git diff --quiet "$TRAVIS_COMMIT_RANGE" -- ; GIT_DIFF_EXIT_CODE=$?
        - |
          if [ "$GIT_DIFF_EXIT_CODE" -gt 1 ] ; then
              git remote set-branches --add origin develop
              git fetch
              TRAVIS_COMMIT_RANGE=origin/develop...
          fi
        - echo $TRAVIS_COMMIT_RANGE
        - |
          planemo ci_find_repos --changed_in_commit_range "$TRAVIS_COMMIT_RANGE" \
                                --output changed_repositories.list
        - cat changed_repositories.list
      script:
        - set -e
        - |
          if [ "$TRAVIS_PULL_REQUEST" == "false" -a "$TRAVIS_BRANCH" == "develop" ]; then
              while read -r DIR; do planemo shed_update --shed_target testtoolshed --shed_key "$TEST_SHED_KEY" --force_repository_creation "$DIR" || exit 1; done < changed_repositories.list
              while read -r DIR; do planemo shed_update --shed_target toolshed --shed_key "$SHED_KEY" --force_repository_creation "$DIR" || exit 1; done < changed_repositories.list
          fi

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - K8S_VERSION="v1.10.0"
    - MINIKUBE_VERSION="v0.28.2"
    - HELM_VERSION="v2.14.3-linux-amd64"
    - HELM_REPO_VERSION="2.0.1"

before_script:
- sudo mount --make-rshared /
- sudo apt-get install -y socat
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
# TODO: remove the --bootstrapper flag once this issue is solved: https://github.com/kubernetes/minikube/issues/2704
- sudo minikube config set WantReportErrorPrompt false
- sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC
# Add nsenter binary
- sudo docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter
- minikube update-context
# Fix the kubectl context, as it's often stale.
# - minikube update-context
- curl -Lo helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}.tar.gz
- tar -xf helm.tar.gz
- sudo mv linux-amd64/helm /usr/local/bin/
- rm -rf linux-amd64
- sudo -H pip install planemo
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
# Set up helm
- helm init --wait
- helm repo add galaxy-helm-repo https://pcm32.github.io/galaxy-helm-charts
- kubectl create serviceaccount --namespace kube-system tiller
- kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
- kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'


script:
- sudo docker build -t test/galaxy-sc-tertiary:19.05-dev -f Dockerfile_init .
- kubectl cluster-info
# for kube-dns
- kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
# kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
# Wait for kube-dns to be ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
- helm install -f helm-configs/.travis-galaxy-sc-deployment.yaml --name travis --version $HELM_REPO_VERSION galaxy-helm-repo/galaxy-stable
- planemo lint -r --report_level error tools
- kubectl describe pods/$(kubectl get pods | awk '{ print $1 }' | grep -v proftpd | grep -v postgres | grep galaxy)
- ./util/wait-for-deployment -n default -t 600 $(kubectl get deployment | awk '{ print $1 }' | grep 'galaxy-stable$')
# - sleep 360
- kubectl logs $(kubectl get pods | awk '{ print $1 }' | grep -v proftpd | grep -v postgres | grep galaxy)
- kubectl describe pods/$(kubectl get pods | awk '{ print $1 }' | grep -v proftpd | grep -v postgres | grep galaxy)

notifications:
  email: false
