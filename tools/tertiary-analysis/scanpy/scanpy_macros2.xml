<macros>
  <token name="@TOOL_VERSION@">1.8.1+4</token>
  <token name="@HELP@">More information can be found at https://scanpy.readthedocs.io</token>
  <token name="@PROFILE@">18.01</token>
  <token name="@VERSION_HISTORY@"><![CDATA[
**Version history**

1.8.1+4+galaxy0: Upate to scanpy-scripts 1.1.5 (running scanpy ==1.8.1), including an option to compress MTX outputs.

1.8.1+3+galaxy0: Upate to scanpy-scripts 1.1.3 (running scanpy ==1.8.1), including a fix to MTX output and a bugfix for the Scrublet wrapper.

1.8.1+2+galaxy0: Upate to scanpy-scripts 1.1.2 (running scanpy ==1.8.1), including improved boolean handling for mito etc.

1.8.1+1+galaxy0: Upate to scanpy-scripts 1.1.1 build 1 (running scanpy ==1.8.1), including improved Scrublet integration with batch handling.

1.8.1+galaxy0: Upate to scanpy-scripts 1.0.1 (running scanpy ==1.8.1), including Scrublet integration.

1.7.2+galaxy0: Upate to scanpy-scripts 0.3.3 (running scanpy ==1.7.2) to incorporate fix for object output from PAGA plotting, to allow PAGA init of FDG.

1.6.0+galaxy0: Update to scanpy-scripts 0.2.13 (running scanpy ==1.6.0) to incorporate new options, code simplifications, and batch integration methods. Jonathan Manning, Expression Atlas team https://www.ebi.ac.uk/gxa/home  at
EMBL-EBI https://www.ebi.ac.uk/

1.4.3+galaxy10: Update to scanpy-scripts 0.2.10 (running scanpy ==1.4.3) to address bugfixes in run-pca.

1.4.3+galaxy10: Update to scanpy-scripts 0.2.9 (running scanpy ==1.4.3) to address bugfixes in find-variable-genes.

1.4.3+galaxy10: Use profile 18.01 for modules.

1.4.3+galaxy6: Update to scanpy-scripts 0.2.8 (running scanpy ==1.4.3) and wider compatibility with other Galaxy modules. Bug fixes in filtering and plotting improvements.

1.4.3+galaxy0: Update to scanpy-scripts 0.2.5 (running scanpy ==1.4.3).

1.4.2+galaxy0: Update to scanpy-scripts 0.2.4 (requires scanpy >=1.4.2).

1.3.2+galaxy1: Normalise-data and filter-genes: Exposes ability to output 10x files.

1.3.2+galaxy0: Initial contribution. Ni Huang and Pablo Moreno, Expression Atlas team https://www.ebi.ac.uk/gxa/home  at
EMBL-EBI https://www.ebi.ac.uk/ and Teichmann Lab at Wellcome Sanger Institute.
    ]]></token>
  <token name="@INPUT_OPTS@">
    --input-format '${input_format}' input.h5
  </token>
  <token name="@SAVE_MATRIX_OPTS@">
    #if $save_raw
      --save-raw
    #end if
    #if $save_layer
      --save-layer ${save_layer}
    #end if
  </token>
  <token name="@OUTPUT_OPTS@">
#if str($output_format).startswith('anndata')
    --show-obj stdout --output-format anndata output.h5
#else
    --show-obj stdout --output-format loom output.h5
#end if
  </token>
  <token name="@PLOT_OPTS@">
#if $fig_title
    --title '${fig_title}'
#end if
    --fig-size '${fig_size}'
    --fig-dpi ${fig_dpi}
    --fig-fontsize ${fig_fontsize}
    ${fig_frame}
    ./output.png
  </token>
  <token name="@EXPORT_MTX_OPTS@">
#if $export_mtx_inputs.export_mtx:
    --export-mtx '${export_mtx_inputs.export_mtx}' 
    --mtx-compression '${export_mtx_inputs.mtx_compression}'
#end if
  </token>

  <xml name="requirements">
    <requirements>
      <requirement type="package" version="1.1.5">scanpy-scripts</requirement>
      <yield/>
    </requirements>
  </xml>

  <xml name="citations">
    <citations>
      <yield />
      <citation type="doi">10.1186/s13059-017-1382-0</citation>
      <citation type="bibtex">
	@misc{githubscanpy-scripts,
	author = {Ni Huang, EBI Gene Expression Team},
	year = {2018},
	title = {Scanpy-scripts: command line interface for Scanpy},
	publisher = {GitHub},
	journal = {GitHub repository},
	url = {https://github.com/ebi-gene-expression-group/scanpy-scripts},
      }</citation>
      <citation type="doi">10.1101/2020.04.08.032698</citation>
      <citation type="doi">10.1038/s41592-021-01102-w</citation>
    </citations>
  </xml>

  <xml name="input_object_params">
    <param name="input_obj_file" argument="input-object-file" type="data" format="h5,h5ad" label="Input object in AnnData/Loom format"/>
    <param name="input_format" argument="--input-format" type="select" label="Format of input object">
      <option value="anndata" selected="true">AnnData format hdf5</option>
      <option value="loom">Loom format hdf5</option>
    </param>
  </xml>

  <xml name="output_object_params">
    <param name="output_format" argument="--output-format" type="select" label="Format of output object">
      <option value="anndata_h5ad" selected="true">AnnData format</option>
      <option value="anndata">AnnData format (h5 for older versions)</option>
      <option value="loom">Loom format</option>
      <option value="loom_legacy">Loom format (h5 for older versions)</option>
    </param>
  </xml>

  <xml name="output_object_params_no_loom">
    <param name="output_format" argument="--output-format" type="select" label="Format of output object">
      <option value="anndata_h5ad" selected="true">AnnData format</option>
      <option value="anndata">AnnData format (h5 for older versions)</option>
    </param>
  </xml>

  <xml name="output_data_obj_no_loom" token_description="operation">
    <data name="output_h5ad" format="h5ad" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ AnnData">
      <filter>output_format == 'anndata_h5ad'</filter>
    </data>
    <data name="output_h5" format="h5" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ AnnData">
      <filter>output_format == 'anndata'</filter>
    </data>
  </xml>

  <xml name="output_data_obj" token_description="operation">
    <data name="output_h5ad" format="h5ad" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ AnnData">
      <filter>output_format == 'anndata_h5ad'</filter>
    </data>
    <data name="output_h5" format="h5" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ AnnData">
      <filter>output_format == 'anndata'</filter>
    </data>
    <data name="output_loom_legacy" format="h5" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ Loom">
      <filter>output_format == 'loom_legacy'</filter>
    </data>
    <data name="output_loom" format="loom" from_work_dir="output.h5" label="${tool.name} on ${on_string}: @DESCRIPTION@ Loom">
      <filter>output_format == 'loom'</filter>
    </data>
  </xml>

  <xml name="save_matrix_params">
    <param name="save_raw" argument="--save-raw" type="boolean" truevalue="yes" falsevalue="no" checked="false"
      label="Save adata to adata.raw before processing?" />
    <param name="save_layer" argument="--save-layer" type="text" optional="true"
      label="Save adata.X to the specified layer before processing."/>
  </xml>  

  <xml name="output_plot_params">
    <param name="fig_title" argument="--title" type="text" label="Figure title"/>
    <param name="fig_size" argument="--fig-size" type="text" value="4,4" label="Figure size as 'width,height', e.g, '7,7'"/>
    <param name="fig_dpi" argument="--fig-dpi" type="integer" min="1" value="80" label="Figure dpi"/>
    <param name="fig_fontsize" argument="--fig-fontsize" type="integer" min="0" value="10" label="Figure font size"/>
    <param name="fig_frame" type="boolean" truevalue="--frameon" falsevalue="--frameoff" checked="false"
           label="Show plot frame"/>
  </xml>

  <xml name="export_mtx_params">
    <conditional name="export_mtx_inputs">
      <param name="export_mtx" argument="--export-mtx" type="boolean" truevalue="./" falsevalue="" checked="false" label="Save to 10x mtx format" help="If enabled, it will generate in addition to the main output in Loom or AnnData an export in 10x format."/>
      <when value="./">
        <param name="mtx_compression" argument="--mtx-compression" type="select" label="" help="Compression type for MTX output.">
          <option value="" selected="true">No compression</option>
          <option value="zip">zip</option>
          <option value="gzip">gzip</option>
          <option value="bz2">bz2</option>
          <option value="zstd">zstd</option>
        </param>
      </when>
      <when value=""/>
    </conditional>
  </xml>

  <xml name="export_mtx_outputs">
    <collection name="mtx_raw" type="list">
      <filter>export_mtx_inputs[export_mtx] == True and 
        export_mtx_inputs[mtx_compression] == ""</filter>
          <data name="matrix_10x" label="${tool.name} on ${on_string}: 10x matrix" format="txt" from_work_dir="matrix.mtx"/>
          <data name="genes_10x" label="${tool.name} on ${on_string}: 10x genes" format="tsv" from_work_dir="genes.tsv"/>
          <data name="barcodes_10x" label="${tool.name} on ${on_string}: 10x barcodes" format="tsv" from_work_dir="barcodes.tsv"/>
    </collection>
    <collection name="mtx_zip" type="list" format="zip">
      <filter>export_mtx_inputs[export_mtx] == True and 
        export_mtx_inputs[mtx_compression] == "zip"</filter>
          <data name="matrix_10x_zip" label="${tool.name} on ${on_string}: 10x matrix (zip)" from_work_dir="matrix.mtx.zip"/>
          <data name="genes_10x_zip" label="${tool.name} on ${on_string}: 10x genes (zip)" from_work_dir="genes.tsv.zip"/>
          <data name="barcodes_10x_zip" label="${tool.name} on ${on_string}: 10x barcodes (zip)" from_work_dir="barcodes.tsv.zip"/>
    </collection>
    <collection name="mtx_gzip" type="list" format="gz">
      <filter>export_mtx_inputs[export_mtx] == True and 
        export_mtx_inputs[mtx_compression] == "gzip"</filter>
          <data name="matrix_10x_gzip" label="${tool.name} on ${on_string}: 10x matrix (gzip)" from_work_dir="matrix.mtx.gz"/>
          <data name="genes_10x_gzip" label="${tool.name} on ${on_string}: 10x genes (gzip)" from_work_dir="genes.tsv.gz"/>
          <data name="barcodes_10x_gzip" label="${tool.name} on ${on_string}: 10x barcodes (gzip)" from_work_dir="barcodes.tsv.gz"/>
    </collection>
    <collection name="mtx_bz2" type="list" format="bz2">
      <filter>export_mtx_inputs[export_mtx] == True and 
        export_mtx_inputs[mtx_compression] == "bz2"</filter>
          <data name="matrix_10x_bz2" label="${tool.name} on ${on_string}: 10x matrix (bz2)" from_work_dir="matrix.mtx.bz2"/>
          <data name="genes_10x_bz2" label="${tool.name} on ${on_string}: 10x genes (bz2)" from_work_dir="genes.tsv.bz2"/>
          <data name="barcodes_10x_bz2" label="${tool.name} on ${on_string}: 10x barcodes (bz2)" from_work_dir="barcodes.tsv.bz2"/>
    </collection>
    <collection name="mtx_zstd" type="list" format="zst">
      <filter>export_mtx_inputs[export_mtx] == True and 
        export_mtx_inputs[mtx_compression] == "zstd"</filter>
          <data name="matrix_10x_zstd" label="${tool.name} on ${on_string}: 10x matrix (zstd)" from_work_dir="matrix.mtx.zst"/>
          <data name="genes_10x_zstd" label="${tool.name} on ${on_string}: 10x genes (zstd)" from_work_dir="genes.tsv.zst"/>
          <data name="barcodes_10x_zstd" label="${tool.name} on ${on_string}: 10x barcodes (zstd)" from_work_dir="barcodes.tsv.zst"/>
    </collection>
  </xml>

</macros>
