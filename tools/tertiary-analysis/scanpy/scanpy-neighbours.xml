<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy_compute_graph" name="Scanpy ComputeGraph" version="@TOOL_VERSION@+galaxy10" profile="@PROFILE@">
  <description>to derive kNN graph</description>
  <macros>
    <import>scanpy_macros2.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
ln -s '${input_obj_file}' input.h5 &&
PYTHONIOENCODING=utf-8 scanpy-neighbors
#if $settings.default == "false"
    --n-neighbors '${settings.n_neighbours}'
    --method '${settings.method}'
    --random-state '${settings.random_seed}'
    #if $settings.use_rep != "auto"
        --use-rep '${settings.use_rep}'
    #end if
    #if $settings.n_pcs
        --n-pcs '${settings.n_pcs}'
    #end if
    ${settings.knn}
#end if
    @INPUT_OPTS@
    @OUTPUT_OPTS@
]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>
    <conditional name="settings">
      <param name="default" type="boolean" checked="true" label="Use programme defaults"/>
      <when value="true"/>
      <when value="false">
        <param name="n_neighbours" argument="--n-neighbors" type="integer" value="15" label="Maximum number of neighbours used"/>
        <param name="use_rep" type="text" label="Use the indicated representation">
          <option value="X_pca" selected="true">X_pca, use PCs</option>
          <option value="X">X, use normalised expression values</option>
        </param>
        <param name="n_pcs" argument="--n-pcs" type="integer" value="50" optional="true" label="Number of PCs to use"/>
        <param name="knn" argument="--knn" type="boolean" truevalue="" falsevalue="--no-knn" checked="true"
               label="Use hard threshold to restrict neighbourhood size (otherwise use a Gaussian kernel to down weight distant neighbours)"/>
        <param name="method" argument="--method" type="select" label="Method for calculating connectivity">
          <option value="umap" selected="true">UMAP</option>
          <option value="gauss">Gaussian</option>
        </param>
        <param name="random_seed" argument="--random-seed" type="integer" value="0" label="Seed for random number generator"/>
      </when>
    </conditional>
  </inputs>

  <outputs>
    <expand macro="output_data_obj" description="Graph object"/>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="run_pca.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="n_neighbours" value="15"/>
      <param name="n_pcs" value="50"/>
      <param name="knn" value="true"/>
      <param name="random_seed" value="0"/>
      <param name="method" value="umap"/>
      <output name="output_h5" file="compute_graph.h5" ftype="h5" compare="sim_size"/>
    </test>
  </tests>

  <help><![CDATA[
=============================================================
Compute a neighborhood graph of observations (`pp.neighbors`)
=============================================================

The neighbor search efficiency of this heavily relies on UMAP (McInnes et al, 2018),
which also provides a method for estimating connectivities of data points -
the connectivity of the manifold (`method=='umap'`). If `method=='diffmap'`,
connectivities are computed according to Coifman et al (2005), in the adaption of
Haghverdi et al (2016).

@HELP@

@VERSION_HISTORY@
]]></help>
  <expand macro="citations"/>
</tool>
