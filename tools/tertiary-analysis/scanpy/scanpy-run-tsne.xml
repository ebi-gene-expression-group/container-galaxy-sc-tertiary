<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy_run_tsne" name="Scanpy RunTSNE" version="@TOOL_VERSION@+galaxy0" profile="@PROFILE@">
  <description>visualise cell clusters using tSNE</description>
  <macros>
    <import>scanpy_macros2.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
#set embeddings_tsv='embeddings.tsv'
ln -s '${input_obj_file}' input.h5 &&
PYTHONIOENCODING=utf-8 scanpy-run-tsne
#if $use_rep
    --use-rep '${use_rep}'
#end if
#if $embeddings
    --export-embedding embeddings.tsv
#end if
#if $settings.default == "false"
    #if $settings.perplexity_file
        #set f = open($settings.perplexity_file.__str__)
        #set perplexity = f.read().strip()
        #silent f.close
    #elif $settings.perplexity
        #set perplexity = $settings.perplexity.__str__.strip()
    #end if      
    #if $perplexity
        --perplexity '$perplexity'
    #end if
    #if $settings.key_added
        #set key_added = $settings.key_added
        #if $perplexity
            #set key_added = $key_added.replace('PERPLEXITY', $perplexity.__str__)
        #end if
        --key-added '${key_added}'
        #set embeddings_tsv="embeddings_" + $key_added.__str__ + ".tsv"    
    #end if
    --early-exaggeration '${settings.early_exaggeration}'
    --learning-rate '${settings.learning_rate}'
    #if $settings.n_pc
        --n-pcs ${settings.n_pc}
    #end if
    #if not $settings.fast_tsne
        --no-fast-tsne
    #end if
    #if $settings.n_job
        --n-jobs ${settings.n_job}
    #end if
    #if $settings.random_seed is not None
        --random-state ${settings.random_seed}
    #end if
#end if
    @INPUT_OPTS@
    @OUTPUT_OPTS@
#if $embeddings
    #if $embeddings_tsv != 'embeddings.tsv'
        && mv '${embeddings_tsv}' embeddings.tsv
    #end if
#end if

]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>
    <param name="embeddings" type="boolean" checked="true" label="Output embeddings in tsv format"/>

    <param name="use_rep" argument="--use-rep" type="text" optional="true" label="Use the indicated representation" help="Use the indicated representation. 'X' (for the content of .X, usuaally normalised expression values) or any key for .obsm (e.g. X_pca for PCA) is valid. If not set, the representation is chosen automatically: For .n_vars less than 50, .X is used, otherwise ‘X_pca’ is used. If ‘X_pca’ is not present, it’s computed with default parameters."/>
    <conditional name="settings">
      <param name="default" type="boolean" checked="true" label="Use programme defaults"/>
      <when value="true"/>
      <when value="false">
        <param name="key_added" argument="--key-added" type="text" optional="true"
               label="Additional suffix to the name of the slot to save the embedding" help="If included, PERPLEXITY will be substituted with the value of the perplexity setting."/>
        <param name="perplexity" argument="--perplexity" type="float" value="30" label="The perplexity is related to the number of nearest neighbours, select a value between 5 and 50"/>
        <param name="perplexity_file" argument="--perplexity" type="data" format="txt,tsv" label="The perplexity is related to the number of nearest neighbours" help="For use with the parameter iterator. Overrides the persplexity option above" optional="true"/>
        <param name="early_exaggeration" argument="--early-exaggeration" type="float" value="12" label="Controls the tightness within and between clusters"/>
        <param name="learning_rate" argument="--learning-rate" type="float" value="1000" label="Learning rate, should be between 100 and 1000"/>
        <param name="fast_tsne" type="boolean" checked="false" label="Use multicoreTSNE" help="Depending on the setup and version, the availability of the needed library might vary and hence fail."/>
        <param name="n_job" argument="--n-jobs" type="integer" optional="true" label="The number of jobs"/>
        <param name="n_pc" argument="--n-pcs" type="integer" optional="true" label="The number of PCs to use"/>
        <param name="random_seed" argument="--random-seed" type="integer" value="0" label="Seed for random number generator"/>
      </when>
    </conditional>

  </inputs>

  <outputs>
    <expand macro="output_data_obj" description="tSNE object"/>
    <data name="output_embed" format="tabular" from_work_dir="embeddings.tsv" label="${tool.name} on ${on_string}: tSNE embeddings">
      <filter>embeddings</filter>
    </data>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="find_cluster.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="perplexity_file" value="perplexity.txt"/>
      <param name="embeddings" value="true"/>
      <param name="random_seed" value="0"/>
      <output name="output_h5" ftype="h5">
        <assert_contents>
          <has_h5_keys keys="obsm/X_tsne"/>
        </assert_contents>
      </output>
      <output name="output_embed" file="run_tsne.embeddings.tsv" ftype="tabular" compare="sim_size" delta_frac="0.1">
        <assert_contents>
          <has_n_columns n="3"/>
        </assert_contents>
      </output>
    </test>
    <test>
      <param name="input_obj_file" value="find_cluster.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="perplexity" value="30"/>
      <param name="embeddings" value="true"/>
      <param name="random_seed" value="0"/>
      <output name="output_h5" ftype="h5">
        <assert_contents>
          <has_h5_keys keys="obsm/X_tsne"/>
        </assert_contents>
      </output>
      <output name="output_embed" file="run_tsne.embeddings.tsv" ftype="tabular" compare="sim_size" delta_frac="0.1">
        <assert_contents>
          <has_n_columns n="3"/>
        </assert_contents>
      </output>
    </test>
  </tests>

  <help><![CDATA[
=========================================================================
t-distributed stochastic neighborhood embedding (tSNE) (`scanpy.tl.tsne`)
=========================================================================

For making TSNE plots, please use `Scanpy PlotEmbed` with the output of this tool and enter "tsne" as the
name of the embedding to plot.

t-distributed stochastic neighborhood embedding (tSNE) (Maaten et al, 2008) has been
proposed for visualizating single-cell data by (Amir et al, 2013). Here, by default,
we use the implementation of *scikit-learn* (Pedregosa et al, 2011).

It yields `X_tsne`, tSNE coordinates of data.

@HELP@

@VERSION_HISTORY@
]]></help>
  <expand macro="citations"/>
</tool>
