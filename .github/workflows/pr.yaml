name: Galaxy Tool Linting for PR
on: [pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.09
  MAX_CHUNKS: 4
jobs:
  # This is a setup modified from that at
  # https://github.com/galaxyproject/tools-iuc/blob/master/.github/workflows/pr.yaml
  # The setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  setup:
    name: Setup cache and Planemo
    runs-on: self-hosted
    outputs:
      galaxy_head_sha: ${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine latest commit in the Galaxy repo
      id: get-galaxy-sha
      run: echo "::set-output name=galaxy_head_sha::$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)"
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy_head_sha }}
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - name: Install Planemo
      run: pip install planemo
    - name: Fake a Planemo run to update cache
      if: steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true'
      run: |
        echo "<tool " > tool.xml
        PIP_QUIET=1 planemo test --galaxy_python_version ${{ matrix.python-version }} --no_conda_auto_init --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE tool.xml

  find_changed:
    name: Determine changed repositories
    needs: [setup]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
    outputs:
      commit_range: ${{ steps.get-commit-range.outputs.commit_range }}
      nchunks: ${{ steps.get-chunks.outputs.nchunks }}
      chunk_list: ${{ steps.get-chunks.outputs.chunk_list }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # The range of commits to check for changes is:
    # - for pull requests we compare against the 1st ancestor, given the current
    #   HEAD is the merge between the PR branch and the base branch
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set commit range (pull request)
      if: github.event_name == 'pull_request'
      run: echo "COMMIT_RANGE=HEAD~.." >> $GITHUB_ENV
    - id: get-commit-range
      run: echo "::set-output name=commit_range::$COMMIT_RANGE"
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Install Planemo
      run: pip install planemo
    - name: Planemo ci_find_repos
      run: planemo ci_find_repos --changed_in_commit_range $COMMIT_RANGE --exclude packages --exclude deprecated --output changed_repositories.list
    - name: Show repo list
      run: cat changed_repositories.list
    - uses: actions/upload-artifact@v2
      with:
        name: Workflow artifacts
        path: changed_repositories.list
    - name: Planemo ci_find_tools for the changed repos
      run: |
        touch changed_tools.list
        if [ -s changed_repositories.list ]; then
            planemo ci_find_tools --output changed_tools.list $(cat changed_repositories.list)
        fi
    - name: Show tool list
      run: cat changed_tools.list
    - name: Compute chunks
      id: get-chunks
      run: |
        nchunks=$(wc -l < changed_tools.list)
        if [ "$nchunks" -gt "$MAX_CHUNKS" ]; then
            nchunks=$MAX_CHUNKS
        elif [ "$nchunks" -eq 0 ]; then
            nchunks=1
        fi
        echo "::set-output name=nchunks::$nchunks"
        echo "::set-output name=chunk_list::[$(seq -s ", " 0 $(($nchunks - 1)))]"
    - name: Show chunks
      run: |
        echo 'Using ${{ steps.get-chunks.outputs.nchunks }} chunks (${{ steps.get-chunks.outputs.chunk_list }})'

  # Planemo lint the changed repositories
  lint:
    name: Lint tools
    needs: [setup, find_changed]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: Workflow artifacts
        path: ../workflow_artifacts/
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Install Planemo
      run: pip install planemo
    - name: Planemo lint
      run: |
        set -e
        while read -r DIR; do
            planemo shed_lint --tools --ensure_metadata --report_level warn --fail_level error --recursive "$DIR";
        done < ../workflow_artifacts/changed_repositories.list
    - name: Planemo ci_find_tools for the commit range
      run: planemo ci_find_tools --changed_in_commit_range ${{ needs.find_changed.outputs.commit_range }} --exclude packages --exclude deprecated --output changed_tools.list
    - name: Check if each changed tool is in the list of changed repositories
      run: |
        set -e
        while read -r TOOL; do
            match_found=false;
            while read -r REPO; do
                case "$TOOL" in
                    "$REPO"*)
                        match_found=true
                        break
                        ;;
                esac
            done < ../workflow_artifacts/changed_repositories.list
            if [ "$match_found" != 'true' ]; then
                echo "Tool $TOOL not in changed repositories list: .shed.yml file missing" >&2
                exit 1
            fi
        done < changed_tools.list

  # Planemo test the changed repositories, each chunk creates an artifact
  # containing HTML and JSON reports for the executed tests
  test:
    name: Test tools
    # This job runs on Linux
    runs-on: self-hosted
    needs: [setup, find_changed]
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.find_changed.outputs.chunk_list) }}
        python-version: [3.8]
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: Workflow artifacts
        path: ../workflow_artifacts/
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Install Planemo
      run: pip install planemo
    - name: Planemo ci_find_tools for the change repos, chunked
      run: |
        touch changed_tools_chunk.list
        if [ -s ../workflow_artifacts/changed_repositories.list ]; then
          planemo ci_find_tools --chunk_count ${{ needs.find_changed.outputs.nchunks }} --chunk ${{ matrix.chunk }} --group_tools --output changed_tools_chunk.list $(cat ../workflow_artifacts/changed_repositories.list)
        fi
    - name: Show changed tools chunk list
      run: cat changed_tools_chunk.list
    - name: Planemo test tools
      run: |
        mkdir json_output
        while read -r TOOL_GROUP; do
            # Check if any of the lines in .tt_biocontainer_skip is a substring of $TOOL_GROUP
            if echo $TOOL_GROUP | grep -qf .tt_biocontainer_skip; then
                PLANEMO_OPTIONS=""
            else
                PLANEMO_OPTIONS="--biocontainers --no_dependency_resolution --no_conda_auto_init --docker_extra_volume /tmp"
            fi
            json=$(mktemp -u -p json_output --suff .json)
            PIP_QUIET=1 planemo test --database_connection postgresql://postgres:postgres@localhost:5432/galaxy $PLANEMO_OPTIONS --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE --galaxy_python_version ${{ matrix.python-version }} --test_output_json "$json" $TOOL_GROUP || true
            docker system prune --all --force --volumes || true
        done < changed_tools_chunk.list
        if [ ! -s changed_tools_chunk.list ]; then
            echo '{"tests":[]}' > "$(mktemp -u -p json_output --suff .json)"
        fi
    - name: Merge tool_test_output.json files
      run: planemo merge_test_reports json_output/*.json tool_test_output.json
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: |
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v2
      with:
        name: 'Tool test output ${{ matrix.chunk  }}'
        path: upload

  combine_outputs:
    name: Combine chunked test results
    needs: [setup, test]
    strategy:
      matrix:
        python-version: [3.8]
    # This job runs on Linux
    runs-on: self-hosted
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
    - name: Install Planemo
      run: pip install planemo
    - name: Install jq
      run: sudo apt-get install jq
    - name: Combine outputs
      run: find artifacts/ -name tool_test_output.json -exec sh -c 'planemo merge_test_reports "$@" tool_test_output.json' sh {} +
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: |
        rm -rf upload
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v2
      with:
        name: 'All tool test results'
        path: upload
    - name: Check status of combined outputs
      run: |
        if jq '.["tests"][]["data"]["status"]' upload/tool_test_output.json | grep -v "success"; then
            echo "Unsuccessful tests found, inspect the 'All tool test results' artifact for details."
            exit 1
        fi

#    repo=$(basename "$DIR")
#    wget http://ftp.ebi.ac.uk/pub/databases/microarray/data/atlas/github_test_data/"$repo".tar.gz
#    tar zxvf "$repo".tar.gz && mv "$repo" "$repo"_test_data
#    planemo test --galaxy_python_version 3.8 "$DIR" --test_data "$repo"_test_data
